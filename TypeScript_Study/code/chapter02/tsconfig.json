{
    // 定义需要编译的文件的目录
    "include": [
        "src/**/*"
    ],
    // 定义不需要编译的文件的目录，有默认值，["node_modules", "bower_components", "jspm_packages"]
    // 一般不用配置
    "exclude": [],

    // 编译器的选项
    "compilerOptions": {
        // 用来指定TS文件被编译为ES的版本
        // 'es3', 'es5', 'es6', 'es2015', 'es2016', 
        // 'es2017', 'es2018', 'es2019', 'es2020', 'es2021', 'es2022', 'esnext'
        "target": "ES2015",

        // 指定要使用的模块化的规范
        // 'none', 'commonjs', 'amd', 'system', 'umd', 'es6', 'es2015', 
        // 'es2020', 'es2022', 'esnext', 'node16', 'nodenext'
        "module": "ES2015",

        // 指定项目中要使用的库，比如DOM库，就能在ts文件中使用document
        // 一般不设置，除非比如代码不是在浏览器环境中运行的，是在nodejs里，
        // 它里面没有dom，那就可以设置一下，使用DOM库
        // 值有'es5', 'es6', 'es2015', 'es7', 'es2016', 'es2017', 'es2018', 
        // 'es2019', 'es2020', 'es2021', 'es2022', 'esnext', 'dom', 
        // 'dom.iterable', 'webworker', 'webworker.importscripts', 
        // 'webworker.iterable', 'scripthost', 'es2015.core', 'es2015.collection', 
        // 'es2015.generator', 'es2015.iterable', 'es2015.promise', 'es2015.proxy', 
        // 'es2015.reflect', 'es2015.symbol', 'es2015.symbol.wellknown', 'es2016.array.include', 
        // 'es2017.object', 'es2017.sharedmemory', 'es2017.string', 'es2017.intl', 'es2017.typedarrays', 
        // 'es2018.asyncgenerator', 'es2018.asynciterable', 'es2018.intl', 'es2018.promise', 'es2018.regexp', 
        // 'es2019.array', 'es2019.object', 'es2019.string', 'es2019.symbol', 'es2019.intl', 'es2020.bigint', 
        // 'es2020.date', 'es2020.promise', 'es2020.sharedmemory', 'es2020.string', 'es2020.symbol.wellknown', 
        // 'es2020.intl', 'es2020.number', 'es2021.promise', 'es2021.string', 'es2021.weakref', 'es2021.intl', 
        // 'es2022.array', 'es2022.error', 'es2022.intl', 'es2022.object', 'es2022.sharedmemory', 'es2022.string', 
        // 'esnext.array', 'esnext.symbol', 'esnext.asynciterable', 'esnext.intl', 'esnext.bigint', 'esnext.string', 'esnext.promise', 'esnext.weakref'

        // "lib": []

        // 指定编译后文件所在目录
        "outDir": "./dist",

        // 将编译后的代码合并成一个文件
        // 设置outFile后，所有的全局作用域中的代码会合并到同一个文件中
        // "outFile": "./dist/app.js"

        // 是否对js文件进行编译，默认是false
        "allowJs": false,

        // 检查js代码是否符合语法规范，默认是false
        "checkJs": false,

        // 编译后是否移除原文件的注释
        "removeComments": true,

        // 不生成编译后的文件
        "noEmit": false,

        // 当有错误时不生成编译后的文件
        "noEmitOnError": false,

        // 所有严格模式的总开关，一开，所有严格模式的配置都开
        // 建议开
        "strict": true,

        // 用来设置编译后的文件是否使用严格模式，默认为false
        // js文件也可直接使用严格模式，在js文件中加上"use strict"即可
        // 严格模式简单理解，它的语法比普通模式的语法更严格，并且在浏览器中
        // 执行的性能更好一些，其实当代码中写了import模块和export模块这些东西，
        // js代码会自动进入到严格模式
        "alwaysStrict": true,

        // 允不允许隐式的any类型
        "noImplicitAny": true,

        // 不允许不明确类型的this
        "noImplicitThis": true,

        // 严格的检查空值
        "strictNullChecks": true,

        
    }
}